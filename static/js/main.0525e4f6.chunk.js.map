{"version":3,"sources":["store/reducer.ts","store/state.tsx","constants.ts","util/socketProvider.tsx","components/Loader/index.tsx","sections/Chat/Messages/Message/index.tsx","sections/Chat/Messages/index.tsx","sections/Chat/TextBox/index.tsx","sections/Chat/OnlineUsers/index.tsx","sections/Chat/index.tsx","sections/Loading/index.tsx","util/AuthenticatedRoute.tsx","util/UnauthenticatedRoute.tsx","components/OfflineCheck/index.tsx","util/fetch.ts","sections/Login/index.tsx","router.tsx","lib/icons.ts","index.tsx","components/OfflineCheck/index.module.scss","sections/Chat/Messages/Message/index.module.scss","sections/Chat/OnlineUsers/index.module.scss"],"names":["produce","draft","action","console","info","type","log","payload","auth","checked","loggedIn","user","token","offline","error","connected","initialState","messages","users","StateContext","React","createContext","state","dispatch","warn","StateProvider","props","useReducer","reducer","value","Provider","children","useGlobalState","useContext","API_URL","process","SocketContext","socket","useState","setSocket","useEffect","newSocket","socketio","reconnection","timeout","query","on","provider","icon","pulse","text","userColor","message","color","style","borderLeft","className","classNames","styles","key","id","name","useImmer","drafts","setState","push","length","uuid","trim","map","eachMessage","Message","Object","values","draftTimer","useRef","Form","noValidate","onSubmit","e","preventDefault","emit","Group","controlId","Control","as","placeholder","autoFocus","onChange","clearTimeout","current","currentTarget","setTimeout","onlineUsers","OverlayTrigger","placement","overlay","Tooltip","chatArea","Loader","OnlineUsers","Messages","TextBox","Container","Row","Col","md","span","offset","path","exact","component","to","Loading","csrfToken","axios","defaults","withCredentials","fetchResource","method","body","a","Error","url","options","data","xsrfHeaderName","headers","response","status","errors","join","username","loading","localState","then","catch","reason","disabled","OfflineCheck","UnauthenticatedRoute","Login","AuthenticatedRoute","Chat","faGoogleFix","faGoogle","faGithubFix","faGithub","library","add","faCoins","faCreditCard","faAt","faColumns","faCog","faArrowDown","faArrowUp","faSignOutAlt","faSignInAlt","faSave","faQuestionCircle","faSmile","faHeart","faAngleRight","faSpinner","faPlus","faTrash","faExclamationTriangle","loadIcons","app","basename","titleTemplate","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0525e4f6.chunk.js","sourcesContent":["import produce from \"immer\"\n\nimport { AppState, Action } from \"./types\";\n\n// TODO NEW BLOG POST\n// const REDUCER = {\n//   [REDUX_CONSTANTS.LOGIN]: (draft, payload) => {},\n// };\n\nexport default produce((draft: AppState, action: Action) => {\n  console.info('REDUCER: ', action.type);\n  console.log(action.payload);\n\n  // REDUCER[action.type](draft, action.payload);\n\n  switch (action.type) {\n    case 'login':\n      draft.auth.checked = true;\n\n      if (!action.payload) {\n        draft.auth.loggedIn = false;\n        draft.auth.user = null;\n        draft.auth.token = null;\n        break;\n      }\n\n      draft.auth.loggedIn = true;\n      draft.auth.user = action.payload.user;\n      draft.auth.token = action.payload.token;\n      break;\n    case 'offline':\n      draft.offline = true;\n      draft.error = null;\n      break;\n    case 'error':\n      draft.error = action.payload;\n      break;\n    case 'socketConnected':\n      draft.connected = action.payload;\n      break;\n  }\n});","import React from 'react';\n\nimport reducer from './reducer';\nimport { AppState, AppContext, Action } from './types';\n\nconst initialState: AppState = {\n  auth: {\n    checked: false,\n    loggedIn: false,\n    user: null,\n    token: null,\n  },\n  offline: false,\n  connected: false,\n  error: null,\n  messages: [],\n  users: [],\n};\nconst defaultDispatch: React.Dispatch<Action> = () => {\n  console.warn('Using default reducer, check StateProvider');\n  return initialState;\n}\nexport const StateContext = React.createContext<AppContext>({\n  state: initialState,\n  dispatch: defaultDispatch,\n});\n\ntype Props = {\n  children: any,\n};\n\nexport const StateProvider = (props: Props) =>{\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  // TODO: if value is not \"any\" then typescript has an issue with readonly state values\n  const value: any = { state, dispatch };\n  return (\n    <StateContext.Provider value={ value }>\n      { props.children }\n    </StateContext.Provider>\n  );\n};\n\nexport const useGlobalState = (): AppContext => React.useContext(StateContext);\nexport default useGlobalState;","export const API_URL = process.env.REACT_APP_API_URL || 'https://api.dotdot.im';","import React, { createContext, useEffect, useState } from \"react\";\nimport socketio from 'socket.io-client';\n\nimport { useGlobalState } from \"store/state\";\nimport { API_URL } from \"../constants\";\n\ntype SocketContextType = {\n  socket: SocketIOClient.Socket | null,\n};\n\nexport const SocketContext = createContext<SocketContextType>({\n  socket: null,\n});\n\ntype Props = {\n  children: any,\n};\n\nexport default (props: Props) => {\n  const { state, dispatch } = useGlobalState();\n  const [ socket, setSocket ] = useState<SocketIOClient.Socket | null>(null);\n\n  useEffect(() => {\n    // clear any errors\n    dispatch({\n      type: 'error',\n      payload: null,\n    });\n\n    if (!state.auth.loggedIn) {\n      return;\n    }\n\n    // initialize the socket\n    const newSocket = socketio(API_URL, {\n      reconnection: true,\n      timeout: 2000,\n      query: {\n          token: state.auth.token,\n      }\n    });\n\n    newSocket.on('connect', () => {\n      dispatch({\n        type: 'socketConnected',\n        payload: true,\n      });\n    });\n\n    newSocket.on('connect_error', (error: string) => {\n      dispatch({\n        type: 'offline',\n        payload: null,\n      });\n    });\n\n    newSocket.on('connect_timeout', (timeout: string) => {\n      dispatch({\n        type: 'offline',\n        payload: null,\n      });\n    });\n\n    newSocket.on('error', (error: string) => {\n      dispatch({\n        type: 'login',\n        payload: null,\n      });\n\n      dispatch({\n        type: 'socketConnected',\n        payload: false,\n      });\n\n      if (error) {\n        dispatch({\n          type: 'error',\n          payload: error,\n        });\n      } else {\n        dispatch({\n          type: 'offline',\n          payload: null,\n        });\n      }\n    });\n\n    setSocket(newSocket);\n  }, [dispatch, state.auth.loggedIn, state.auth.token]);\n\n  let provider = {\n    socket,\n  };\n\n  return (\n    <SocketContext.Provider value={ provider }>\n      { props.children }\n    </SocketContext.Provider>\n  );\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype Props = {\n  text?: string | null,\n};\n\nexport default (props: Props) => {\n  return (\n    <>\n      <FontAwesomeIcon icon='spinner' pulse /> { props.text || 'Loading' }\n    </>\n  );\n};","import React from 'react';\nimport classNames from 'classnames';\nimport { Message } from 'store/types';\n\nimport styles from './index.module.scss';\n\ntype Props = {\n  message: Message,\n  draft?: boolean,\n};\n\nexport default (props: Props) => {\n\n  const userColor = `#${props.message.user.color}`;\n\n  const style: any = {\n    borderLeft: `solid 5px ${userColor}`,\n  };\n\n  if (props.draft) {\n    style.color = '#aaa';\n  }\n\n  return (\n    <div\n      className={ classNames(styles.message, \"d-flex justify-content-between align-items-center\") }\n      key={props.message.id}\n      style={ style }\n    >\n      {props.message.message}\n      <span style={ { color: userColor } }>\n        @{props.message.user.name}\n      </span>\n    </div>\n  );\n};","import React, { useEffect, useContext } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useImmer } from \"use-immer\";\n\nimport { SocketContext } from \"util/socketProvider\";\nimport { Message } from \"store/types\";\nimport MessageComponent from \"./Message\";\n\ntype State = {\n  messages: Message[];\n  drafts: {\n    [key: string]: Message;\n  };\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    messages: [],\n    drafts: {}\n  });\n\n  const { socket } = useContext(SocketContext);\n\n  useEffect(() => {\n    if (!socket) {\n      return;\n    }\n    socket.on(\"message\", (payload: Message) => {\n      setState(draft => {\n        draft.messages.push({\n          id: draft.messages.length,\n          message: payload.message,\n          user: payload.user\n        });\n        // delete draft from this user\n        delete draft.drafts[payload.user.uuid];\n      });\n    });\n\n    socket.on(\"draft\", (payload: Message) => {\n      setState(draft => {\n        if (payload.message.trim().length < 1) {\n          delete draft.drafts[payload.user.uuid];\n          return;\n        }\n        draft.drafts[payload.user.uuid] = payload;\n      });\n    });\n  }, [socket, setState]);\n\n  return (\n    <div className=\"my-4\">\n      {state.messages.map(eachMessage => (\n        <MessageComponent message={ eachMessage } />\n      ))}\n      {Object.values(state.drafts).map(eachMessage => (\n        <MessageComponent message={ eachMessage } draft />\n      ))}\n    </div>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { useImmer } from \"use-immer\";\n\nimport { SocketContext } from \"util/socketProvider\";\n\ntype State = {\n  message: string,\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    message: '',\n  });\n  const draftTimer = useRef<any>(null)\n\n  const { socket } = useContext(SocketContext);\n\n  const handleSubmit = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    socket?.emit('message', {\n      message: state.message,\n    });\n\n    setState(draft => {\n      draft.message = '';\n    });\n  };\n\n  const sendDraft = (message: string) => {\n    socket?.emit('draft', {\n      message,\n    });\n  };\n\n  const onType = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    clearTimeout(draftTimer.current);\n\n    const value = e.currentTarget.value;\n    setState(draft => {\n      draft.message = value;\n    });\n\n    draftTimer.current = setTimeout(() => {\n      sendDraft(value);\n    }, 100);\n  };\n\n  return (\n    <Form noValidate onSubmit={handleSubmit}>\n      <Form.Group controlId=\"chatForm.message\">\n        <Form.Control\n          as=\"input\"\n          type=\"text\"\n          placeholder='Message...'\n          autoFocus\n          onChange={ onType }\n          value={ state.message }\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { useImmer } from \"use-immer\";\n\nimport { SocketContext } from \"util/socketProvider\";\nimport { User } from \"store/types\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nimport styles from './index.module.scss';\n\ntype State = {\n  users: User[];\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    users: [],\n  });\n\n  const { socket } = useContext(SocketContext);\n\n  useEffect(() => {\n    if (!socket) {\n      return;\n    }\n    socket.on(\"users\", (payload: any) => {\n      setState(draft => {\n        draft.users = payload.users;\n      });\n    });\n  }, [socket, setState]);\n\n  return (\n    <div className={ styles.onlineUsers }>\n      { state.users.map(user => (\n        <OverlayTrigger\n          key={ user.uuid }\n          placement='bottom'\n          overlay={\n            <Tooltip id={`user-${user.uuid}`}>\n              @{user.name}\n            </Tooltip>\n          }\n        >\n          <span style={{ color: `#${user.color}` }}>&bull;</span>\n        </OverlayTrigger>\n      )) }\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport { useGlobalState } from \"store/state\";\nimport Loader from 'components/Loader';\n\nimport \"./index.scss\";\nimport Messages from\"./Messages\";\nimport TextBox from \"./TextBox\";\nimport OnlineUsers from \"./OnlineUsers\";\n\nexport default () => {\n  const { state } = useGlobalState();\n\n  let chatArea = (\n    <Loader />\n  );\n\n  if (state.connected) {\n    chatArea = (\n      <>\n        <OnlineUsers />\n        <Messages />\n        <TextBox />\n      </>\n    );\n  }\n\n  return (\n    <Container>\n      { chatArea }\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport Loader from \"components/Loader\";\n\nexport default () => {\n  return (\n    <>\n      <header>\n        <div className=\"bg-angle\" />\n        <section>\n          <Container>\n            <Row>\n              <Col md={{ span: 6, offset: 3 }}>\n                <div className='text-center mt-5'>\n                  <h4 className='my-2' style={{ color: '#fff' }}>\n                    <Loader />\n                  </h4>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </section>\n      </header>\n    </>\n  );\n};\n","import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useGlobalState } from 'store/state';\n\nimport Loading from 'sections/Loading';\n\ntype Props = {\n  path: string,\n  exact?: boolean,\n  component?: React.ComponentType<any>,\n};\n\n/**\n * This Route only allows browsing into if the user IS logged in\n */\nexport default (props: Props) => {\n  const { state } = useGlobalState();\n  if (!state.auth.checked) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (!state.auth.loggedIn) {\n    return (\n      <Redirect to='/login' />\n    );\n  }\n\n  return (\n    <Route\n      path={ props.path }\n      exact={ props.exact }\n      component={ props.component }\n    />\n  );\n};","import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useGlobalState } from 'store/state';\n\nimport Loading from 'sections/Loading';\n\ntype Props = {\n  path: string,\n  exact?: boolean,\n  component?: React.ComponentType<any>,\n};\n\n/**\n * This Route only allows browsing into if the user is NOT logged in\n */\nexport default (props: Props) => {\n  const { state } = useGlobalState();\n  if (!state.auth.checked) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (state.auth.loggedIn) {\n    return (\n      <Redirect to='/' />\n    );\n  }\n\n  return (\n    <Route\n      path={ props.path }\n      exact={ props.exact }\n      component={ props.component }\n    />\n  );\n};","import React from \"react\";\n\nimport { useGlobalState } from \"store/state\";\nimport styles from './index.module.scss';\n\nexport default () => {\n  const { state } = useGlobalState();\n\n  if (!state.offline && !state.error) {\n    return null;\n  }\n\n  if (state.error) {\n    return (\n      <div className={ styles.offline }>\n        Error: {state.error}\n      </div>\n    );\n  }\n\n  return (\n    <div className={ styles.offline }>\n      You seem to be offline! Please try again later\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport axios, { AxiosRequestConfig } from 'axios';\n\nimport { API_URL } from '../constants';\n\nexport type FetchMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\nexport const CSRF_HEADER = 'x-csrf-token';\nlet csrfToken = '';\n\nexport type FetchError = {\n  status: number,\n  message: string,\n  errors: string[],\n};\n\ntype FetchReturn<T> = [\n  boolean,\n  T | null,\n  FetchError | null,\n];\n\naxios.defaults.withCredentials = true;\n\nfunction useFetch<T>(path: string, method: FetchMethod, body?: any): FetchReturn<T> {\n  const [error, setError] = useState<FetchError | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [response, setResponse] = useState<T | null>(null);\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      try {\n        const data = await fetchResource(path, method, body);\n        setResponse(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    sendRequest();\n\n  }, [path, method, body,]);\n\n  return [loading, response, error];\n};\n\nexport const fetchResource = async (path: string, method: FetchMethod, body?: any) => {\n  if (!path) {\n    throw new Error(`'url' is required for fetching data`);\n  }\n\n  const url = `${API_URL}${path}`;\n  const options: AxiosRequestConfig = {\n    url,\n    method,\n    data: body,\n    timeout: 6000,\n    withCredentials: true,\n    xsrfHeaderName: CSRF_HEADER,\n    headers: {},\n  };\n\n  if (csrfToken.length > 0) {\n    options.headers[CSRF_HEADER] = csrfToken;\n  }\n\n  try {\n    const response = await axios(options);\n\n    if (response.headers[CSRF_HEADER]) {\n      csrfToken = response.headers[CSRF_HEADER];\n    }\n\n    return await response.data;\n  } catch (error) {\n    if (error.response) {\n      console.warn(`useFetch error on ${method} ${path}`, error.response);\n      const returnError: FetchError = {\n        status: error.response.status,\n        message: error.response.data ? error.response.data.errors.join(', ') : error.message,\n        errors: error.response.data.errors,\n      };\n      throw returnError;\n    } else {\n      console.warn(`useFetch error on ${method} ${path}`, error);\n      const returnError: FetchError = {\n        status: 500,\n        message: error.message,\n        errors: [error.message]\n      };\n      throw returnError;\n    }\n  }\n\n\n};\n\nexport default useFetch;","import React from 'react';\nimport { Form, Container } from 'react-bootstrap';\n\nimport { useGlobalState } from 'store/state';\nimport { fetchResource } from 'util/fetch';\nimport { useImmer } from 'use-immer';\n\ntype State = {\n  username: string,\n  loading: boolean,\n};\n\nexport default () => {\n  const { dispatch } = useGlobalState();\n  const [localState, setState] = useImmer<State>({\n    username: '',\n    loading: false,\n  });\n\n  const handleSubmit = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    if (localState.loading) {\n      return;\n    }\n\n    setState(draft => {\n      draft.loading = true;\n    });\n\n    const body = {\n      username: localState.username,\n    };\n    fetchResource('/auth', 'POST', body).then(data => {\n      if (!data || !data.user.uuid) {\n        console.warn('Invalid user object');\n        dispatch({\n          type: 'login',\n          payload: null,\n        })\n        return;\n      }\n\n      dispatch({\n        type: 'login',\n        payload: data,\n      })\n    }).catch(reason => {\n      dispatch({\n        type: 'offline',\n        payload: null,\n      })\n\n      dispatch({\n        type: 'login',\n        payload: null,\n      })\n\n      setState(draft => {\n        draft.loading = false;\n      });\n    });\n  };\n\n  return (\n    <Container className='mt-4'>\n      <Form noValidate onSubmit={handleSubmit}>\n        <Form.Group controlId=\"loginForm.username\">\n          <Form.Control\n            as=\"input\"\n            type=\"text\"\n            placeholder=\"What's your name?\"\n            disabled={ localState.loading }\n            autoFocus\n            onChange={e => {\n              const value = e.currentTarget.value;\n              setState(draft => { draft.username = value });\n            }}\n            value={ localState.username }\n          />\n        </Form.Group>\n      </Form>\n    </Container>\n  );\n};","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport Chat from \"sections/Chat\";\nimport AuthenticatedRoute from \"util/AuthenticatedRoute\";\nimport UnauthenticatedRoute from \"util/UnauthenticatedRoute\";\nimport OfflineCheck from \"components/OfflineCheck\";\nimport Login from \"sections/Login\";\nimport useGlobalState from \"store/state\";\nimport { fetchResource } from \"util/fetch\";\n\nexport default () => {\n  const { state, dispatch } = useGlobalState();\n\n  if (!state.auth.checked) {\n    fetchResource('/auth', 'GET').then(data => {\n      if (!data || !data.user.uuid) {\n        console.warn('Invalid user object');\n        dispatch({\n          type: 'login',\n          payload: null,\n        })\n        return;\n      }\n\n      dispatch({\n        type: 'login',\n        payload: data,\n      })\n    }).catch(reason => {\n      console.log('Login check failed', reason);\n      dispatch({\n        type: 'error',\n        payload: reason.errors.join(', '),\n      })\n\n      dispatch({\n        type: 'login',\n        payload: null,\n      })\n    });\n  };\n\n  return (\n    <>\n      <div id=\"content\">\n        <OfflineCheck />\n        <Switch>\n          <UnauthenticatedRoute path='/login' component={ Login } />\n          <AuthenticatedRoute path=\"/\" component={ Chat } />\n        </Switch>\n      </div>\n    </>\n  );\n};\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\n\n// Icons available in two styles, regular and solid\n// solid tends to have all free icons, while some regular ones are PRO only\nimport {\n    faCoins,\n    faCreditCard,\n    faAt,\n    faColumns,\n    faCog,\n    faArrowUp,\n    faArrowDown,\n    faSignOutAlt,\n    faSignInAlt,\n    faSave,\n    faQuestionCircle,\n    faHeart,\n    faAngleRight,\n    faSpinner,\n    faPlus,\n    faTrash,\n    faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport {\n    faSmile,\n} from \"@fortawesome/free-regular-svg-icons\";\n\nimport {\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\n/**\n * All icons that will be used in this app need to be preloaded here\n */\n\nexport default () => {\n  const faGoogleFix: any = faGoogle;\n  const faGithubFix: any = faGithub;\n  library.add(\n    faCoins,\n    faCreditCard,\n    faAt,\n    faColumns,\n    faCog,\n    faArrowDown,\n    faArrowUp,\n    faSignOutAlt,\n    faSignInAlt,\n    faSave,\n    faQuestionCircle,\n    faSmile,\n    faHeart,\n    faAngleRight,\n    faGoogleFix,\n    faGithubFix,\n    faSpinner,\n    faPlus,\n    faTrash,\n    faExclamationTriangle,\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Helmet from \"react-helmet\";\n\nimport { StateProvider } from \"store/state\";\nimport SocketProvider from \"util/socketProvider\";\n\nimport loadIcons from \"./lib/icons\";\nimport Router from \"./router\";\n\nimport \"assets/scss/index.scss\";\n\n\nloadIcons();\n\nconst app = (\n  <BrowserRouter basename={process.env.REACT_APP_BASEPATH}>\n    <Helmet\n      titleTemplate='%s | dotdot'\n    />\n    <StateProvider>\n      <SocketProvider>\n        <Router />\n      </SocketProvider>\n    </StateProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"offline\":\"OfflineCheck_offline__2vKbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2v30T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"onlineUsers\":\"OnlineUsers_onlineUsers__2Umxk\"};"],"sourceRoot":""}