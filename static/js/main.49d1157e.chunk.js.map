{"version":3,"sources":["sections/Chat/OnlineUsers/index.module.scss","store/reducer.ts","store/state.tsx","constants.ts","util/socketProvider.tsx","components/Loader/index.tsx","sections/Chat/Messages/Message/index.tsx","sections/Chat/Messages/index.tsx","sections/Chat/TextBox/index.tsx","sections/Chat/OnlineUsers/index.tsx","sections/Chat/index.tsx","sections/Loading/index.tsx","util/AuthenticatedRoute.tsx","util/UnauthenticatedRoute.tsx","components/OfflineCheck/index.tsx","util/fetch.ts","sections/Login/index.tsx","router.tsx","lib/icons.ts","index.tsx","sections/Chat/Messages/Message/index.module.scss","components/OfflineCheck/index.module.scss","sections/Chat/index.module.scss","sections/Chat/Messages/index.module.scss"],"names":["module","exports","produce","draft","action","type","auth","checked","error","offline","payload","loggedIn","user","token","socket","connected","initialState","key","StateContext","React","createContext","state","dispatch","console","warn","StateProvider","props","useReducer","reducer","value","Provider","children","useGlobalState","useContext","API_URL","process","SocketContext","useState","setSocket","useEffect","iv","window","crypto","getRandomValues","Uint8Array","subtle","generateKey","name","length","then","log","encoded","TextEncoder","encode","encrypt","encrypted","exportKey","exported","importKey","importedKey","decrypt","decrypted","original","TextDecoder","decode","newSocket","socketio","reconnection","timeout","query","on","provider","icon","pulse","text","userColor","message","color","style","borderLeft","className","classNames","styles","id","op","uuid","dots","backgroundColor","useImmer","messages","drafts","setState","chatAreaRef","useRef","current","scrollTop","scrollHeight","lastMessage","push","trim","ref","map","eachMessage","Message","Object","values","draftTimer","Form","noValidate","onSubmit","e","preventDefault","emit","textBox","Group","controlId","Control","as","placeholder","autoFocus","onChange","clearTimeout","currentTarget","setTimeout","users","onlineUsers","OverlayTrigger","placement","overlay","Tooltip","chatArea","Loader","OnlineUsers","Messages","TextBox","Container","container","Row","Col","md","span","offset","path","exact","component","to","Loading","csrfToken","axios","defaults","withCredentials","fetchResource","method","body","a","Error","url","options","data","xsrfHeaderName","headers","response","status","parseAxiosError","errors","parseErrorList","join","defaultError","i","Array","isArray","parseErrors","useFetch","username","loading","localState","catch","reason","disabled","OfflineCheck","UnauthenticatedRoute","Login","AuthenticatedRoute","Chat","faGoogleFix","faGoogle","faGithubFix","faGithub","library","add","faCoins","faCreditCard","faAt","faColumns","faCog","faArrowDown","faArrowUp","faSignOutAlt","faSignInAlt","faSave","faQuestionCircle","faSmile","faHeart","faAngleRight","faSpinner","faPlus","faTrash","faExclamationTriangle","loadIcons","app","basename","titleTemplate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49d1157e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"onlineUsers\":\"OnlineUsers_onlineUsers__2Umxk\"};","import produce from \"immer\"\n\nimport { AppState, Action } from \"./types\";\n\n// TODO NEW BLOG POST\n// const REDUCER = {\n//   [REDUX_CONSTANTS.LOGIN]: (draft, payload) => {},\n// };\n\nexport default produce((draft: AppState, action: Action) => {\n  // REDUCER[action.type](draft, action.payload);\n\n  switch (action.type) {\n    case 'login':\n      draft.auth.checked = true;\n      draft.error = null;\n      draft.offline = false;\n\n      if (!action.payload) {\n        draft.auth.loggedIn = false;\n        draft.auth.user = null;\n        draft.auth.token = null;\n        break;\n      }\n\n      draft.auth.loggedIn = true;\n      draft.auth.user = action.payload.user;\n      draft.auth.token = action.payload.token;\n      break;\n    case 'offline':\n      draft.offline = true;\n      draft.error = null;\n      break;\n    case 'error':\n      draft.error = action.payload;\n      break;\n    case 'socketConnected':\n      draft.socket.connected = action.payload;\n      if (!action.payload) {\n        draft.auth.checked = false;\n      }\n      break;\n  }\n});","import React from 'react';\n\nimport reducer from './reducer';\nimport { AppState, AppContext, Action } from './types';\n\nconst initialState: AppState = {\n  auth: {\n    checked: false,\n    loggedIn: false,\n    user: null,\n    token: null,\n  },\n  socket: {\n    connected: false,\n    key: null,\n  },\n  offline: false,\n  error: null,\n};\nconst defaultDispatch: React.Dispatch<Action> = () => {\n  console.warn('Using default reducer, check StateProvider');\n  return initialState;\n}\nexport const StateContext = React.createContext<AppContext>({\n  state: initialState,\n  dispatch: defaultDispatch,\n});\n\ntype Props = {\n  children: any,\n};\n\nexport const StateProvider = (props: Props) =>{\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  // TODO: if value is not \"any\" then typescript has an issue with readonly state values\n  const value: any = { state, dispatch };\n  return (\n    <StateContext.Provider value={ value }>\n      { props.children }\n    </StateContext.Provider>\n  );\n};\n\nexport const useGlobalState = (): AppContext => React.useContext(StateContext);\nexport default useGlobalState;","export const API_URL = process.env.REACT_APP_API_URL || 'https://api.dotdot.im';","import React, { createContext, useEffect, useState } from \"react\";\nimport socketio from 'socket.io-client';\n\nimport { useGlobalState } from \"store/state\";\nimport { API_URL } from \"../constants\";\n\ntype SocketContextType = {\n  socket: SocketIOClient.Socket | null,\n};\n\nexport const SocketContext = createContext<SocketContextType>({\n  socket: null,\n});\n\ntype Props = {\n  children: any,\n};\n\nexport default (props: Props) => {\n  const { state, dispatch } = useGlobalState();\n  const [ socket, setSocket ] = useState<SocketIOClient.Socket | null>(null);\n\n  // Temporary Encryption Demo\n  useEffect(() => {\n    // 1. generate an encryption key\n    const algorithm = \"AES-GCM\";\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n    crypto.subtle.generateKey(\n      {\n        name: algorithm,\n        length: 256,\n    }, true, ['encrypt', 'decrypt']).then(key => {\n        console.log('key', key);\n\n        // Encrypt the users message\n        const enc = new TextEncoder();\n        const encoded = enc.encode(\"random message 123\");\n        crypto.subtle.encrypt({\n          name: algorithm,\n          iv,\n        }, key, encoded).then(encrypted => {\n          // Export the key to be shared\n          crypto.subtle.exportKey('raw', key).then((exported) => {\n            // Import the key\n            const imported = crypto.subtle.importKey('raw', exported, algorithm, true, ['encrypt', 'decrypt']);\n            imported.then(importedKey => {\n\n              // decrypt the test message\n              crypto.subtle.decrypt({\n                name: algorithm,\n                iv,\n              }, importedKey, encrypted).then(decrypted => {\n                const dec = new TextDecoder();\n                const original = dec.decode(decrypted);\n                console.log('decrypted:', original);\n              });\n            })\n          });\n        });\n      })\n  }, []);\n\n  useEffect(() => {\n    // clear any errors\n    dispatch({\n      type: 'error',\n      payload: null,\n    });\n\n    if (!state.auth.loggedIn) {\n      return;\n    }\n\n    // initialize the socket\n    const newSocket = socketio(API_URL, {\n      reconnection: true,\n      timeout: 2000,\n      query: {\n          token: state.auth.token,\n      }\n    });\n\n    newSocket.on('connect', () => {\n      dispatch({\n        type: 'socketConnected',\n        payload: true,\n      });\n    });\n\n    newSocket.on('connect_error', (error: string) => {\n      dispatch({\n        type: 'offline',\n        payload: null,\n      });\n    });\n\n    newSocket.on('connect_timeout', (timeout: string) => {\n      dispatch({\n        type: 'offline',\n        payload: null,\n      });\n    });\n\n    newSocket.on('error', (error: string) => {\n      dispatch({\n        type: 'login',\n        payload: null,\n      });\n\n      dispatch({\n        type: 'socketConnected',\n        payload: false,\n      });\n\n      if (error) {\n        dispatch({\n          type: 'error',\n          payload: error,\n        });\n      } else {\n        dispatch({\n          type: 'offline',\n          payload: null,\n        });\n      }\n    });\n\n    setSocket(newSocket);\n  }, [dispatch, state.auth.loggedIn, state.auth.token]);\n\n  let provider = {\n    socket,\n  };\n\n  return (\n    <SocketContext.Provider value={ provider }>\n      { props.children }\n    </SocketContext.Provider>\n  );\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype Props = {\n  text?: string | null,\n};\n\nexport default (props: Props) => {\n  return (\n    <>\n      <FontAwesomeIcon icon='spinner' pulse /> { props.text || 'Loading' }\n    </>\n  );\n};","import React from 'react';\nimport classNames from 'classnames';\nimport { Message } from 'store/types';\n\nimport styles from './index.module.scss';\nimport useGlobalState from 'store/state';\n\ntype Props = {\n  message: Message,\n  draft?: boolean,\n};\n\nexport default (props: Props) => {\n  const { state } = useGlobalState();\n\n  const userColor = `#${props.message.user.color}`;\n\n  const style: any = {\n    borderLeft: `solid 5px ${userColor}`,\n  };\n\n  if (props.draft) {\n    style.color = '#aaa';\n  }\n\n  return (\n    <div\n      className={ classNames(styles.message) }\n      key={props.message.id}\n      style={ style }\n    >\n      {props.message.message}\n      <span className={ classNames(styles.user, { [styles.op]: props.message.user.uuid === state.auth.user?.uuid }) }>\n        <i>@</i>{props.message.user.name}\n      </span>\n      <div className={ classNames(styles.dots) } style={ { backgroundColor: userColor } } />\n    </div>\n  );\n};","import React, { useEffect, useContext, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport classNames from \"classnames\";\n\nimport { SocketContext } from \"util/socketProvider\";\nimport { Message } from \"store/types\";\nimport MessageComponent from \"./Message\";\n\nimport styles from './index.module.scss';\n\ntype State = {\n  messages: Message[];\n  drafts: {\n    [key: string]: Message;\n  };\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    messages: [],\n    drafts: {}\n  });\n\n  const { socket } = useContext(SocketContext);\n\n  const chatAreaRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chatAreaRef || !chatAreaRef.current) {\n      return;\n    }\n    chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n  }, [state.messages]);\n\n  useEffect(() => {\n    if (!socket) {\n      return;\n    }\n    socket.on(\"message\", (payload: Message) => {\n      // check if the last one was by the same user\n      setState(draft => {\n        // delete draft from this user\n        delete draft.drafts[payload.user.uuid];\n\n        const lastMessage = draft.messages[draft.messages.length - 1];\n        if (lastMessage && lastMessage.user.uuid === payload.user.uuid) {\n          lastMessage.message += `\\n${payload.message}`;\n          return;\n        }\n\n        draft.messages.push({\n          id: draft.messages.length,\n          message: payload.message,\n          user: payload.user\n        });\n\n      });\n    });\n\n    socket.on(\"draft\", (payload: Message) => {\n      setState(draft => {\n        if (payload.message.trim().length < 1) {\n          delete draft.drafts[payload.user.uuid];\n          return;\n        }\n        draft.drafts[payload.user.uuid] = payload;\n      });\n    });\n  }, [socket, setState]);\n\n  return (\n    <div className={ classNames(styles.messages, \"my-4\") } ref={ chatAreaRef }>\n      {state.messages.map(eachMessage => (\n        <MessageComponent key={ eachMessage.id } message={ eachMessage } />\n      ))}\n      {Object.values(state.drafts).map(eachMessage => (\n        <MessageComponent key={ eachMessage.id } message={ eachMessage } draft />\n      ))}\n    </div>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { useImmer } from \"use-immer\";\n\nimport { SocketContext } from \"util/socketProvider\";\nimport styles from './index.module.scss';\n\ntype State = {\n  message: string,\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    message: '',\n  });\n  const draftTimer = useRef<any>(null)\n\n  const { socket } = useContext(SocketContext);\n\n  const handleSubmit = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    if (state.message.length < 1 || state.message.trim().length < 1) {\n      return;\n    }\n\n    socket?.emit('message', {\n      message: state.message,\n    });\n\n    setState(draft => {\n      draft.message = '';\n    });\n  };\n\n  const sendDraft = (message: string) => {\n    if (message.length < 1 || message.trim().length < 1) {\n      return;\n    }\n    socket?.emit('draft', {\n      message,\n    });\n  };\n\n  const onType = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    clearTimeout(draftTimer.current);\n\n    const value = e.currentTarget.value;\n    setState(draft => {\n      draft.message = value;\n    });\n\n    draftTimer.current = setTimeout(() => {\n      sendDraft(value);\n    }, 100);\n  };\n\n  return (\n    <Form noValidate onSubmit={handleSubmit} className={ styles.textBox }>\n      <Form.Group controlId=\"chatForm.message\">\n        <Form.Control\n          as=\"input\"\n          type=\"text\"\n          placeholder='Type a message...'\n          autoFocus\n          onChange={ onType }\n          value={ state.message }\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { useImmer } from \"use-immer\";\n\nimport { SocketContext } from \"util/socketProvider\";\nimport { User } from \"store/types\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nimport styles from './index.module.scss';\n\ntype State = {\n  users: User[];\n};\n\nexport default () => {\n  const [state, setState] = useImmer<State>({\n    users: [],\n  });\n\n  const { socket } = useContext(SocketContext);\n\n  useEffect(() => {\n    if (!socket) {\n      return;\n    }\n    socket.on(\"users\", (payload: any) => {\n      setState(draft => {\n        draft.users = payload.users;\n      });\n    });\n  }, [socket, setState]);\n\n  return (\n    <div className={ styles.onlineUsers }>\n      { state.users.map(user => (\n        <OverlayTrigger\n          key={ user.uuid }\n          placement='bottom'\n          overlay={\n            <Tooltip id={`user-${user.uuid}`}>\n              @{user.name}\n            </Tooltip>\n          }\n        >\n          <span style={{ color: `#${user.color}` }}>&bull;</span>\n        </OverlayTrigger>\n      )) }\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport { useGlobalState } from \"store/state\";\nimport Loader from 'components/Loader';\n\nimport styles from \"./index.module.scss\";\nimport Messages from\"./Messages\";\nimport TextBox from \"./TextBox\";\nimport OnlineUsers from \"./OnlineUsers\";\n\nexport default () => {\n  const { state } = useGlobalState();\n\n  let chatArea = (\n    <Loader />\n  );\n\n  if (state.socket.connected) {\n    chatArea = (\n      <>\n        <OnlineUsers />\n        <Messages />\n        <TextBox />\n      </>\n    );\n  }\n\n  return (\n    <Container className={ styles.container }>\n      { chatArea }\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport Loader from \"components/Loader\";\n\nexport default () => {\n  return (\n    <>\n      <header>\n        <div className=\"bg-angle\" />\n        <section>\n          <Container>\n            <Row>\n              <Col md={{ span: 6, offset: 3 }}>\n                <div className='text-center mt-5'>\n                  <h4 className='my-2' style={{ color: '#fff' }}>\n                    <Loader />\n                  </h4>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </section>\n      </header>\n    </>\n  );\n};\n","import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useGlobalState } from 'store/state';\n\nimport Loading from 'sections/Loading';\n\ntype Props = {\n  path: string,\n  exact?: boolean,\n  component?: React.ComponentType<any>,\n};\n\n/**\n * This Route only allows browsing into if the user IS logged in\n */\nexport default (props: Props) => {\n  const { state } = useGlobalState();\n  if (!state.auth.checked) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (!state.auth.loggedIn) {\n    return (\n      <Redirect to='/login' />\n    );\n  }\n\n  return (\n    <Route\n      path={ props.path }\n      exact={ props.exact }\n      component={ props.component }\n    />\n  );\n};","import React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useGlobalState } from 'store/state';\n\nimport Loading from 'sections/Loading';\n\ntype Props = {\n  path: string,\n  exact?: boolean,\n  component?: React.ComponentType<any>,\n};\n\n/**\n * This Route only allows browsing into if the user is NOT logged in\n */\nexport default (props: Props) => {\n  const { state } = useGlobalState();\n  if (!state.auth.checked) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (state.auth.loggedIn) {\n    return (\n      <Redirect to='/' />\n    );\n  }\n\n  return (\n    <Route\n      path={ props.path }\n      exact={ props.exact }\n      component={ props.component }\n    />\n  );\n};","import React from \"react\";\n\nimport { useGlobalState } from \"store/state\";\nimport styles from './index.module.scss';\n\nexport default () => {\n  const { state } = useGlobalState();\n\n  if (!state.offline && !state.error) {\n    return null;\n  }\n\n  if (state.error) {\n    return (\n      <div className={ styles.offline }>\n        Error: {state.error}\n      </div>\n    );\n  }\n\n  return (\n    <div className={ styles.offline }>\n      You seem to be offline! Please try again later\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios';\n\nimport { API_URL } from '../constants';\n\nexport type FetchMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\nexport const CSRF_HEADER = 'x-csrf-token';\nlet csrfToken = '';\n\nexport type FetchError = {\n  status: number,\n  message: string,\n  errors: string[],\n};\n\ntype FetchReturn<T> = [\n  boolean,\n  T | null,\n  FetchError | null,\n];\n\naxios.defaults.withCredentials = true;\n\nfunction useFetch<T>(path: string, method: FetchMethod, body?: any): FetchReturn<T> {\n  const [error, setError] = useState<FetchError | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [response, setResponse] = useState<T | null>(null);\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      try {\n        const data = await fetchResource(path, method, body);\n        setResponse(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    sendRequest();\n\n  }, [path, method, body,]);\n\n  return [loading, response, error];\n};\n\nexport const fetchResource = async (path: string, method: FetchMethod, body?: any) => {\n  if (!path) {\n    throw new Error(`'url' is required for fetching data`);\n  }\n\n  const url = `${API_URL}${path}`;\n  const options: AxiosRequestConfig = {\n    url,\n    method,\n    data: body,\n    timeout: 6000,\n    withCredentials: true,\n    xsrfHeaderName: CSRF_HEADER,\n    headers: {},\n  };\n\n  if (csrfToken.length > 0) {\n    options.headers[CSRF_HEADER] = csrfToken;\n  }\n\n  try {\n    const response = await axios(options);\n\n    if (response.headers[CSRF_HEADER]) {\n      csrfToken = response.headers[CSRF_HEADER];\n    }\n\n    return await response.data;\n  } catch (error) {\n    if (error.response) {\n      console.warn(`useFetch error on ${method} ${path}`, error.response);\n      const returnError: FetchError = {\n        status: error.response.status,\n        message: parseAxiosError(error),\n        errors: parseErrorList(error),\n      };\n      throw returnError;\n    }\n\n    console.warn(`useFetch network error on ${method} ${path}`, error);\n      const returnError: FetchError = {\n        status: 500,\n        message: error.message,\n        errors: [error.message]\n      };\n      throw returnError;\n  }\n};\n\nfunction parseAxiosError(error: AxiosError): string {\n  if (!error.response || !error.response.data) {\n    return error.message || 'An error occurred';\n  }\n\n  return parseErrorList(error).join('. ');\n}\n\nfunction parseErrorList(error: AxiosError): string[] {\n  const defaultError = 'An error occurred';\n  if (!error.response || !error.response.data) {\n    return [error.message || defaultError];\n  }\n\n  return parseErrors(\n    defaultError,\n    error.response.data,\n    error.response.data.errors,\n    error.response.data.error,\n  );\n}\n\nfunction parseErrors(defaultError: string, ...errors: any[]): string[] {\n  for (let i = 0; i < errors.length; i++) {\n    const error = errors[i];\n    if (Array.isArray(error)) return error;\n    if (typeof error === 'string') return [error];\n  }\n\n  return [defaultError];\n}\n\nexport default useFetch;","import React from 'react';\nimport { Form, Container } from 'react-bootstrap';\n\nimport { useGlobalState } from 'store/state';\nimport { fetchResource } from 'util/fetch';\nimport { useImmer } from 'use-immer';\n\ntype State = {\n  username: string,\n  loading: boolean,\n};\n\nexport default () => {\n  const { dispatch } = useGlobalState();\n  const [localState, setState] = useImmer<State>({\n    username: '',\n    loading: false,\n  });\n\n  const handleSubmit = (e: React.ChangeEvent<any>) => {\n    e.preventDefault();\n\n    if (localState.loading) {\n      return;\n    }\n\n    setState(draft => {\n      draft.loading = true;\n    });\n\n    const body = {\n      username: localState.username,\n    };\n    fetchResource('/auth', 'POST', body).then(data => {\n      if (!data || !data.user.uuid) {\n        console.warn('Invalid user object');\n        dispatch({\n          type: 'login',\n          payload: null,\n        })\n        return;\n      }\n\n      dispatch({\n        type: 'login',\n        payload: data,\n      })\n    }).catch(reason => {\n      console.log('login fail reason', reason);\n      dispatch({\n        type: 'error',\n        payload: reason.errors.join(', '),\n      })\n\n      setState(draft => {\n        draft.loading = false;\n      });\n    });\n  };\n\n  return (\n    <Container className='mt-4'>\n      <Form noValidate onSubmit={handleSubmit}>\n        <Form.Group controlId=\"loginForm.username\">\n          <Form.Control\n            as=\"input\"\n            type=\"text\"\n            placeholder=\"What's your name?\"\n            disabled={ localState.loading }\n            autoFocus\n            onChange={e => {\n              const value = e.currentTarget.value;\n              setState(draft => { draft.username = value });\n            }}\n            value={ localState.username }\n          />\n        </Form.Group>\n      </Form>\n    </Container>\n  );\n};","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport Chat from \"sections/Chat\";\nimport AuthenticatedRoute from \"util/AuthenticatedRoute\";\nimport UnauthenticatedRoute from \"util/UnauthenticatedRoute\";\nimport OfflineCheck from \"components/OfflineCheck\";\nimport Login from \"sections/Login\";\nimport useGlobalState from \"store/state\";\nimport { fetchResource } from \"util/fetch\";\n\nexport default () => {\n  const { state, dispatch } = useGlobalState();\n\n  if (!state.auth.checked) {\n    fetchResource('/auth', 'GET').then(data => {\n      if (!data || !data.user.uuid) {\n        console.warn('Invalid user object');\n        dispatch({\n          type: 'login',\n          payload: null,\n        })\n        return;\n      }\n\n      dispatch({\n        type: 'login',\n        payload: data,\n      })\n    }).catch(reason => {\n      console.log('Login check failed', reason);\n      dispatch({\n        type: 'error',\n        payload: reason.errors.join(', '),\n      })\n\n      dispatch({\n        type: 'login',\n        payload: null,\n      })\n    });\n  };\n\n  return (\n    <>\n      <OfflineCheck />\n      <Switch>\n        <UnauthenticatedRoute path='/login' component={ Login } />\n        <AuthenticatedRoute path=\"/\" component={ Chat } />\n      </Switch>\n    </>\n  );\n};\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\n\n// Icons available in two styles, regular and solid\n// solid tends to have all free icons, while some regular ones are PRO only\nimport {\n    faCoins,\n    faCreditCard,\n    faAt,\n    faColumns,\n    faCog,\n    faArrowUp,\n    faArrowDown,\n    faSignOutAlt,\n    faSignInAlt,\n    faSave,\n    faQuestionCircle,\n    faHeart,\n    faAngleRight,\n    faSpinner,\n    faPlus,\n    faTrash,\n    faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport {\n    faSmile,\n} from \"@fortawesome/free-regular-svg-icons\";\n\nimport {\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\n/**\n * All icons that will be used in this app need to be preloaded here\n */\n\nexport default () => {\n  const faGoogleFix: any = faGoogle;\n  const faGithubFix: any = faGithub;\n  library.add(\n    faCoins,\n    faCreditCard,\n    faAt,\n    faColumns,\n    faCog,\n    faArrowDown,\n    faArrowUp,\n    faSignOutAlt,\n    faSignInAlt,\n    faSave,\n    faQuestionCircle,\n    faSmile,\n    faHeart,\n    faAngleRight,\n    faGoogleFix,\n    faGithubFix,\n    faSpinner,\n    faPlus,\n    faTrash,\n    faExclamationTriangle,\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Helmet from \"react-helmet\";\n\nimport { StateProvider } from \"store/state\";\nimport SocketProvider from \"util/socketProvider\";\n\nimport loadIcons from \"./lib/icons\";\nimport Router from \"./router\";\n\nimport \"assets/scss/index.scss\";\n\n\nloadIcons();\n\nconst app = (\n  <BrowserRouter basename={process.env.REACT_APP_BASEPATH}>\n    <Helmet\n      titleTemplate='%s | dotdot'\n    />\n    <StateProvider>\n      <SocketProvider>\n        <Router />\n      </SocketProvider>\n    </StateProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2v30T\",\"dots\":\"Message_dots__24igM\",\"user\":\"Message_user__3HofW\",\"op\":\"Message_op__3lLYM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"offline\":\"OfflineCheck_offline__2vKbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chat_container__22QAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__tCmp1\"};"],"sourceRoot":""}